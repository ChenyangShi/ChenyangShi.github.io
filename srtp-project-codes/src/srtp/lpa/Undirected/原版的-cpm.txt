package cpm;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.*;

public class CliquePercolationMethod {
	
	int nodenum = 0;                              //节点数目
	
//	int communitynumber = 0;                     //社区数目	
	
	ReadData rd;//ReadData类的对象
	
	int k = 4;
	
	int counter = 0;
	
	boolean visited [];
	
//	int cliquenumber = 0;
	
//	List<Clique> cliqueslist = new ArrayList<Clique>();
	
//	ArrayList belong[] ;              //该节点属于哪几个社区
	
	LinkedList<Integer> neighborlist[];
	
	LinkedList<Community> communitylist = new LinkedList<Community>();
	
	/*
	 * @CliquePercolationMethod
	 * 此方法实现派系过滤算法
	 */
	public CliquePercolationMethod(String file)
	{
	//	ReadData rd = new ReadData(file);
		
		rd = new ReadData(file);
		nodenum = rd.nodenum;
		
	//  ArrayList belong[] = new ArrayList[nodenum];
/*		
		belong = new ArrayList [nodenum];//分配一个容量为nodenum的belong数组
		for(int i=0;i<nodenum;i++)
			belong[i] = new ArrayList<Integer>();//初始化
*/		
	//	LinkedList<Integer> neighborlist[] = new LinkedList [nodenum];
		
		neighborlist = new LinkedList[nodenum];//分配一个大小为nodenum的neighborlist链表
		for(int i=0;i<nodenum;i++)
			neighborlist[i] = new LinkedList<Integer>();//初始化
		
	//boolean visited[] = new boolean[nodenum];
		
		visited = new boolean[nodenum];//分配一个布尔型数组
		for(int i=0;i<nodenum;i++)
			visited[i] = false;//初始化表示所有节点未被访问过
		
		neighborlist = rd.neighbor;
				
	}
	
	
	public void action()
	{
		int visitednumber = 0;
		
//		int ind = 0;
		
		while(visitednumber < nodenum)//访问过的节点数小于总结点数时循环
		{
			int i = 0;
			while(visited[i])//遍历找到未访问过的节点
				i++;
			
			visited[i] = true;//标记已访问
			visitednumber++;//访问过的数量加1
			
			LinkedList<Integer> comnodelist = new LinkedList<Integer>();//分配一个 共同节点 链表
			comnodelist.add(i);//正在访问的节点加入
			
			boolean found = false;
			
			for(int j=0;j<neighborlist[i].size();j++)//j小于头节点i的表结点数目时循环
			{
				int neighbor_j = neighborlist[i].get(j);//在头节点i中获取第j+1个表结点
				
				for(int m=j+1;m<neighborlist[i].size();m++)//m小于头节点i的表结点数目时循环
				{	
					int neighbor_m = neighborlist[i].get(m);//在头节点i中获取第m+1个即j+2个表结点
					for(int n = m+1; n<neighborlist[i].size(); n++) 
					{
						int neighbor_n = neighborlist[i].get(n);
						if(neighborlist[neighbor_j].contains(neighbor_n)&&neighborlist[neighbor_m].contains(neighbor_n))//如果头节点j+1中存在表节点m+1 
						{
							found = true;
							counter++;
							System.out.println("~~~" + counter);
							comnodelist.add(neighbor_j);
							comnodelist.add(neighbor_m);
							comnodelist.add(neighbor_n);
							if(visited[neighbor_j] == false)
							{
								visitednumber++;
								visited[neighbor_j] = true;
							}
						
							if(visited[neighbor_m] == false)
							{
								visitednumber++;
								visited[neighbor_m] = true;
							}
							
							if(visited[neighbor_n] == false)
							{
								visitednumber++;
								visited[neighbor_n] = true;
							}
							break;
						}
					}
					break;
				}
				
				if(found == true)
					break;
				
			}//for循环结束
			
			
		/*	if(found == false)
			{
				for(int j=0;j<comnodelist.size();j++)
				{
					int node_index = comnodelist.get(j);//返回节点下标
					belong[node_index].add(ind);
				}
				
				ind++;
				
			}
		*/
			if(found == true)
			{
				
				for(int j=0;j<nodenum;j++)
					if(!comnodelist.contains(j))//共有结点表中没有节点j
					{
						int adjacentnumber = 0;
						
						for(int m=0;m<comnodelist.size();m++)//遍历comnode链表
						{
							int node_index = comnodelist.get(m);//依次返回下标
							if(neighborlist[node_index].contains(j))
							{
								adjacentnumber++;
							}
							
							if(adjacentnumber >= k-1)
								break;
							
						}
						
						if(adjacentnumber >= k-1  )
						{
							comnodelist.add(j);
							if( visited[j] == false)
							{	
								visitednumber++;
								visited[j] = true;
							}
						}
						
						
					}
				
				
			/*	
				for(int j=0;j<comnodelist.size();j++)
				{
					int node_index = comnodelist.get(j);
					belong[node_index].add(ind);
				}
				
				ind++;
			*/					
			}
			
			
			Community community = new Community();
			community.shared_node.addAll(comnodelist);//把共有节点数的 全部放在一个community对象的nodelist
			communitylist.add(community);//把该对象添加到 社区链表集中
		
		}
			
		
	}
	
	
	public void show()
	{
		for(int i=0;i<communitylist.size();i++)//communitylist.size()就是社区的数目
		{
			System.out.print("community "+i +": ");
			System.out.print(communitylist.get(i));
		}
		
		
	}
	
	
	public static void main(String args[])
	{
		
		CliquePercolationMethod cpm = new CliquePercolationMethod("Graph1.txt");
		
		cpm.action();
		
		cpm.show();
		
				
	}

}

